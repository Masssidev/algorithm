/*배열 arr가 주어집니다. 배열 arr의 각 원소는 숫자 0부터 9까지로 이루어져 있습니다. 
 * 이때, 배열 arr에서 연속적으로 나타나는 숫자는 하나만 남기고 전부 제거하려고 합니다. 
 * 배열 arr에서 제거 되고 남은 수들을 return 하는 solution 함수를 완성해 주세요. 
 * 단, 제거된 후 남은 수들을 반환할 때는 배열 arr의 원소들의 순서를 유지해야 합니다.
예를들면
arr = [1, 1, 3, 3, 0, 1, 1] 이면 [1, 3, 0, 1] 을 return 합니다.
arr = [4, 4, 4, 3, 3] 이면 [4, 3] 을 return 합니다.
배열 arr에서 연속적으로 나타나는 숫자는 제거하고 남은 수들을 return 하는 solution 함수를 완성해 주세요.

제한사항
배열 arr의 크기 : 1,000,000 이하의 자연수
배열 arr의 원소의 크기 : 0보다 크거나 같고 9보다 작거나 같은 정수
*/
package practice;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class RemoveDuplication {
	public static void main(String[] args) {
		try (Scanner scanner = new Scanner(System.in)) {
			System.out.print("배열의 크기를 정해주세요: ");
			int size = scanner.nextInt();
			int[] arr = new int[size];
			System.out.print("배열에 저장할 숫자들을 입력해주세요: ");
			for (int i = 0; i < size; ++i) {
				arr[i] = scanner.nextInt();
			}

			System.out.println(Arrays.toString(solution(arr)));
		}
	}

	private static int[] solution(int[] arr) {
		return makeIntArray(getArrayList(arr));
	}

	private static ArrayList<Integer> getArrayList(int[] arr) {
		ArrayList<Integer> arrayList = new ArrayList<>();
		arrayList.add(arr[0]);
		for (int i = 0; i < arr.length - 1; ++i) {
			if (arr[i] != arr[i + 1])
				arrayList.add(arr[i + 1]);
		}
		return arrayList;
	}

	private static int[] makeIntArray(ArrayList<Integer> arrayList) {
		int[] result = new int[arrayList.size()];
		for (int i = 0; i < result.length; ++i) {
			result[i] = arrayList.get(i);
		}
		return result;
	}

}
