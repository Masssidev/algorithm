/*
 * 출발지점부터 distance만큼 떨어진 곳에 도착지점이 있습니다. 그리고 그사이에는 바위들이 놓여있습니다. 바위 중 몇 개를 제거하려고 합니다.
 * 예를 들어, 도착지점이 25만큼 떨어져 있고, 바위가 [2, 14, 11, 21, 17] 지점에 놓여있을 때 바위 2개를 제거하면 출발지점, 도착지점, 바위 간의 거리가 아래와 같습니다.
 * 제거한 바위의 위치	각 바위 사이의 거리	거리의 최솟값
 * [21, 17]	[2, 9, 3, 11]	       2
 * [2, 21]	[11, 3, 3, 8]	       3
 * [2, 11]	[14, 3, 4, 4]	       3
 * [11, 21]	[2, 12, 3, 8]	       2
 * [2, 14]	[11, 6, 4, 4]	       4
 * 위에서 구한 거리의 최솟값 중에 가장 큰 값은 4입니다.
 * 출발지점부터 도착지점까지의 거리 distance, 바위들이 있는 위치를 담은 배열 rocks, 제거할 바위의 수 n이 매개변수로 주어질 때, 
 * 바위를 n개 제거한 뒤 각 지점 사이의 거리의 최솟값 중에 가장 큰 값을 return 하도록 solution 함수를 작성해주세요.
 */
package practice;

import java.util.Arrays;

public class SteppingStone {

	public static void main(String[] args) {
		SteppingStone theSteppingStone = new SteppingStone();
		int distance = 25;
		int[] rocks = { 2, 14, 11, 21, 17 };
		int n = 2;
		System.out.println(theSteppingStone.solution(distance, rocks, n));
	}

	public int solution(int distance, int[] rocks, int n) {
		int answer = 0;
		Arrays.sort(rocks);

		int start = 1, end = distance, middle;
		while (start <= end) {
			middle = (start + end) / 2;
			int cur = 0;
			int hits = 0;
			for (int i = 0; i < rocks.length; i++) {
				if (rocks[i] - cur < middle) {
					hits++;
				} else {
					cur = rocks[i];
				}
			}
			if (hits > n) {
				end = middle - 1;
			} else {
				start = middle + 1;
			}
		}
		answer = end;
		return answer;
	}

}
